#include "driver/i2s.h"
#include "esp_system.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include <math.h>
#include <stdio.h>

#define SAMPLE_RATE (48000)
#define I2S_NUM (0)
#define WAVE_FREQ_HZ (6000)
#define MAXVOL_INT (8000)
#define PI (3.14159265)
#define I2S_BCK_IO (GPIO_NUM_5) //(GPIO_NUM_26)
#define I2S_WS_IO (GPIO_NUM_25) //(GPIO_NUM_25)
#define I2S_DO_IO (GPIO_NUM_14) //(GPIO_NUM_22)
#define I2S_DI_IO (-1)

#define SAMPLE_PER_CYCLE (SAMPLE_RATE / WAVE_FREQ_HZ)
#define BUFFER_NUM (8)
#define DELAY_MS (5)

uint16_t samples_data[(SAMPLE_PER_CYCLE)];
// uint16_t* samples_data = NULL;

float a_step = 0;
size_t i2s_bytes_write = 0;
int sequence[4] = { 48, 60, 72, 84 };

void setup_waves(void)
{
    // uint16_t* memoria = malloc(SAMPLE_PER_CYCLE * sizeof(uint16_t));

    printf("\r\nTest bits=%d\n", 1);
    double sin_float;
    for (int i = 0; i < SAMPLE_PER_CYCLE; i++) {
        // sin_float = sin(2 * i * PI / (double)SAMPLE_PER_CYCLE);
        // samples_data[i] = (uint16_t)((sin_float + 1) * MAXVOL_INT);
        if (i < (SAMPLE_PER_CYCLE * 0.5))
            sin_float = i / (double)SAMPLE_PER_CYCLE;
        else
            sin_float = (SAMPLE_PER_CYCLE - i) / (double)SAMPLE_PER_CYCLE;

        samples_data[i] = (uint16_t)((sin_float + 1) * MAXVOL_INT);
    }
}

/*
static void setup_triangle_sine_waves(int bits){}
*/

void main_task(void* parameter)
{
    float* p = (float*)parameter;
    // float m_step = 261.0 / (float)SAMPLE_RATE;
    float m_step = *p;
    printf("frequenza interna: %f\n", m_step);
    // for 36Khz sample rates, we create 100Hz sine wave, every cycle need 36000/100 = 360 samples (4-bytes or 8-bytes each sample)
    // depend on bits_per_sample
    // using 6 buffers, we need 60-samples per buffer
    // if 2-channels, 16-bit each channel, total buffer is 360*4 = 1440 bytes
    // if 2-channels, 24/32-bit each channel, total buffer is 360*8 = 2880 bytes
    // if 1-channels, 16-bit at one channel, total buffer is 360*2 = 720 bytes

    i2s_config_t i2s_config = {
        .mode = I2S_MODE_MASTER | I2S_MODE_TX, // Only TX
        .sample_rate = SAMPLE_RATE,
        .bits_per_sample = 16,
        .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT, // mono
        //        .channel_format = I2S_CHANNEL_FMT_RIGHT_LEFT,                           //2-channels
        .communication_format = I2S_COMM_FORMAT_STAND_I2S, // I2S_COMM_FORMAT_I2S | I2S_COMM_FORMAT_I2S_MSB,
        .dma_buf_count = BUFFER_NUM,
        //.dma_buf_len = SAMPLE_PER_CYCLE, // one cycle per one buffer
        .dma_buf_len = 1024,
        .use_apll = true,
        .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1 // Interrupt level 1
    };
    i2s_pin_config_t pin_config = {
        .bck_io_num = I2S_BCK_IO,
        .ws_io_num = I2S_WS_IO,
        .data_out_num = I2S_DO_IO,
        .data_in_num = I2S_DI_IO // Not used
    };
    i2s_driver_install(I2S_NUM, &i2s_config, 0, NULL);
    i2s_set_pin(I2S_NUM, &pin_config);
    i2s_set_clk(I2S_NUM, SAMPLE_RATE, 16, 1); // 16bits, 1 channels

    // generate sine wave data (unsigned int 16bit)
    // setup_waves();
    float step = 0;

    while (1) {
        /*
        i2s_write(I2S_NUM, samples_data, sizeof(samples_data), &i2s_bytes_write, portMAX_DELAY);
        vTaskDelay(DELAY_MS / portTICK_RATE_MS);
        */
        if (step >= 1.0)
            step = 0.0;

        // double value = sin(2 * PI * step);
        // uint16_t i_value = (uint16_t)((value + 1.0) * MAXVOL_INT);
        uint16_t v = (uint16_t)(step * MAXVOL_INT);

        i2s_write(I2S_NUM, &v, sizeof(uint16_t), &i2s_bytes_write, portMAX_DELAY);
        vTaskDelay(DELAY_MS / portTICK_RATE_MS);

        step += m_step;
    }
}

float mtof(int m)
{
    return (int)(pow(2, (m - 69) / 12.0) * 440.0);
}

void app_main()
{
    short c = 0;

    /*
    while (1) {
        if (c >= 4)
            c = 0;

        float f = mtof(sequence[c]);
        float step = f / (float)SAMPLE_RATE;
        BaseType_t xReturned;
        TaskHandle_t xHandle = NULL;
        xReturned = xTaskCreate(main_task, "main_task", 1024 * 2, (void*)(&step), 5, &xHandle);
        vTaskDelay(1000 / portTICK_RATE_MS);
        printf("frq: %d\n", (int)f);
        i2s_stop(I2S_NUM);
        vTaskDelete(xHandle);
        c++;
    }
    */

    /*
     static float step = 261.0 / (float)SAMPLE_RATE;
     // BaseType_t xReturned;
     TaskHandle_t xHandle = NULL;
     xTaskCreate(main_task, "main_task", 1024 * 2, &step, 5, &xHandle);
     */
    while (1) {
        if (c >= 4)
            c = 0;

        float f = mtof(sequence[c]);
        a_step = f / (float)SAMPLE_RATE;
        BaseType_t xReturned;
        TaskHandle_t xHandle = NULL;
        xReturned = xTaskCreate(main_task, "main_task", 1024 * 2, (void*)(&a_step), 5, &xHandle);
        vTaskDelay(1000 / portTICK_RATE_MS);
        printf("frq: %d\n", (int)f);
        i2s_stop(I2S_NUM);
        if (xReturned == pdPASS)
            vTaskDelete(xHandle);
        c++;
    }
}
